module libspoofax/core/language

imports
  libstratego-lib

rules

  /**
   * Returns the name (string) for the language of the context this strategy is executed in.
   */
  language = prim("language")

  /**
   * Returns a list of (groupId, id, version, location) tuples for the language components of the context this strategy 
   * is executed in.
   */
  language-components = prim("language_components")
  
  /**
   * Returns a (groupId, id, version) tuple for the language implementation of the context this strategy is executed in.
   */
  language-implementation = prim("language_implementation")
  
  /**
   * Returns a (name, groupId, id, version, location) tuple for the language specification of the context this strategy 
   * is executed in, or fails if not executed in the context of a language specification.
   */
  language-specification = prim("language_specification")

  /**
   * Returns a relative path to a src-gen directory for the given name.
   */
  language-srcgen-dir = prim("language_spec_srcgen_dir")

  /**
   * Load ATerm resources and their imports from the language of the context this strategy is executed in.
   * Takes as input a list of (relative) paths, and a strategy that returns the list of imported resources.
   * Returns a list of path and resource pairs. Fails if any of the resources or their imports does not exist.
   *
   * @param path : name:Term -> String
   * @param imports : resource:Term -> names:List(Term)
   * @type names:List(Term) -> List(name:Term * resource:Term)
   */
  language-resources(path, imports) = prim("language_resources", path, imports|)

  /**
   * Check if a language with the given name (string) is active in the context this strategy is executed in.
   */
  is-language-active = prim("is_language_active")

  /**
   * Call a strategy from another language that is active in the context this strategy is executed in.
   */
  call-in-language(|lang, strategy) = prim("call_strategy", lang, strategy)
