module libspoofax/term/origin

imports
  strategolib
  libspoofax/resource/path

strategies

  origin-term      = prim("SSL_EXT_origin_term", <id>) <+ origin-sublist-term
  origin-text      = origin-support-sublist(prim("SSL_EXT_origin_text", <id>))
  origin-offset    = origin-support-sublist(prim("SSL_EXT_origin_offset", <id>))
  origin-location  = prim("SSL_EXT_origin_location", <id>)
  origin-line      = origin-location => (<id>, _, _, _)
  origin-column    = origin-location => (_, <id>, _, _)
  origin-file      = prim("SSL_EXT_origin_file", <id>)
  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)

    origin-location-offset = prim("SSL_EXT_origin_location_offset", <id>)
    origin-location-offset-set(|origin-location-offset) = prim("SSL_EXT_set_origin_location_offset", origin-location-offset)

  origin-language-description =
    prim("SSL_EXT_languagedescription", <id>)

  origin-language =
    origin-file;
    origin-language-description;
    Fst

  origin-track-forced(s) =
    ![<id>]; all(s); ?[<id>]

  origin-relative-path:
    trm -> rel-path
    where
      full-path := <origin-file> trm;
      len-project-prefix := <project-path; string-length; inc>;
      rel-path := <string-as-chars(drop(|len-project-prefix))> full-path

    origin-debug-all = topdown(try(origin-debug))
    origin-debug = where(debug(!$[[<(origin-offset; write-to-string) <+ !"NO ORIGIN">][" "]]))

strategies

    origin-term-desugared = prim("SSL_EXT_origin_term_desugared", <id>)
  origin-term-fuzzy = prim("SSL_EXT_origin_term_fuzzy", <id>)

  origin-indent = origin-support-sublist(prim("SSL_EXT_origin_indentation", <id>))
  origin-separation = origin-support-sublist(prim("SSL_EXT_origin_separation", <id>)) // only succeeds if list size >= 2 elems
  origin-layout-prefix = origin-support-sublist(prim("SSL_EXT_origin_layout_prefix", <id>))
  layout-prefix = origin-layout-prefix <+ !""

  origin-deletion-offset =
    origin-support-sublist(prim("SSL_EXT_origin_deletion_offset", <id>));
    !(<Fst>, <Snd; inc>) //exclusive end

  origin-start-offset = origin-offset; Fst
  origin-end-offset = origin-offset; Snd
  origin-deletion-start-offset = origin-deletion-offset; Fst
  origin-deletion-end-offset = origin-deletion-offset; Snd
  origin-layout-prefix-start-offset = origin-insert-before-offset

  is-origin-term = <equal> (<origin-term>, <id>)
  is-origin-term-desugared = <equal> (<origin-term-desugared>, <id>)
  has-origin-term = where(origin-term)
  has-origin-sublist-term = where(origin-sublist-term)
  is-origin-sublist-term = <equal> (<origin-sublist-term>, <id>)

  origin-sublist-term = prim("SSL_EXT_origin_sublist_term", <id>)

  origin-support-sublist(s) =
    (origin-sublist-term; s) <+
    (?[h|[]]; <s> h) <+
    s

  origin-set-relation:
    (origin-node, new-node) -> origin-tracked-node
    where
      origin-tracked-node := <!Some(<id>); all(!new-node); ?Some(<id>)> origin-node

strategies // comments

  origin-documentation-comment =
    origin-surrounding-comments;
    filter(string-as-chars(documentation-comment-chars));
    concat-strings

  documentation-comment-chars:
    ['*' | c*] -> <ltrim(?' ' + ?'\t' + ?'\n' + ?'\r')> c*

  origin-surrounding-comments = prim("SSL_EXT_origin_surrounding_comments", <origin-language>, <id>)
  origin-comments-after       = origin-support-sublist(prim("SSL_EXT_origin_comments_after", <id>))
  comments-after = origin-comments-after <+ !""
  origin-insert-before-offset = origin-support-sublist(prim("SSL_EXT_origin_insert_before_offset", <id>))
  origin-insert-at-end-offset = origin-support-sublist(prim("SSL_EXT_origin_insert_at_end_offset", <id>))
  origin-text-with-layout     = origin-support-sublist(prim("SSL_EXT_origin_text_with_layout", <id>))
